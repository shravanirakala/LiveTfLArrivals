services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.9.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 5
    healthcheck:
      test: ["CMD", "bash", "-c", "echo 'ruok' | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  kafka:
    image: confluentinc/cp-kafka:7.9.0
    hostname: kafka
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:29092"
      - "9101:9101" # JMX
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_NUM_PARTITIONS: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka:29092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'false'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
    healthcheck:
      test: [ "CMD", "bash", "-c", 'nc localhost 9092' ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - app-network

  schema-registry:
    image: confluentinc/cp-schema-registry:7.9.0
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'PLAINTEXT://kafka:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - app-network
 
  control-centre:
    image: confluentinc/cp-enterprise-control-center:7.9.0
    hostname: control-centre
    container_name: control-centre
    depends_on:
      kafka:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: kafka:29092
      CONTROL_CENTER_ZOOKEEPER_CONNECT: zookeeper:2181
      CONTROL_CENTER_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD", "bash", "-c", "curl -f http://localhost:9021/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - app-network

  postgres:
    image: postgres:14
    container_name: postgres
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
    networks:
      - app-network 

  webserver:
    image: apache/airflow:2.10.5-python3.9
    container_name: webserver
    ports:
      - "8080:8080"
    command: >
      bash -c "
        pip install -r /requirements.txt &&
        airflow db init && 
        airflow users create --username admin --password admin --firstname Admin --lastname User --role Admin --email admin@example.com &&
        airflow webserver
      "
    depends_on:
      - postgres
    environment:
      AIRFLOW__CORE__EXECUTOR: "LocalExecutor"
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: "postgresql+psycopg2://airflow:airflow@postgres:5432/airflow"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./requirements.txt:/requirements.txt
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network

  airflow-scheduler:
    image: apache/airflow:2.10.5-python3.9
    container_name: scheduler
    command: >
      bash -c "
        pip install -r /requirements.txt &&
        airflow db upgrade && 
        airflow scheduler
      "
    depends_on:
      - webserver
      - kafka
    environment:
      AIRFLOW__CORE__EXECUTOR: "LocalExecutor"
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: "postgresql+psycopg2://airflow:airflow@postgres:5432/airflow"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./requirements.txt:/requirements.txt
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network

  cassandra:
    image: cassandra:4.1
    container_name: cassandra
    hostname: cassandra
    ports:
      - "9042:9042"
    environment:
      CASSANDRA_CLUSTER_NAME: "kafka_cluster"
      CASSANDRA_AUTHENTICATOR: "PasswordAuthenticator"
    volumes:
      - cassandra-data:/var/lib/cassandra/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "cqlsh -u cassandra -p cassandra -e 'DESCRIBE KEYSPACES'"]
      interval: 30s
      timeout: 10s
      retries: 5
  
  spark-master:
    image: bitnami/spark:3.5.0
    hostname: spark-master
    ports:
      - "8085:8080"  # Web UI
      - "7077:7077"  # Master port
    environment:
      SPARK_MODE: "master"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8085" ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network

  spark-worker:
    image: bitnami/spark:3.5.0
    depends_on:
      - spark-master
    environment:
      SPARK_MODE: "worker"
      SPARK_MASTER_URL: "spark://spark-master:7077"
    networks:
      - app-network
  
  tfl_app:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: tfl_app
    volumes:
      - ./spark:/app/spark
    depends_on:
      - spark-master
      - kafka
      - cassandra
      - postgres
    networks:
      - app-network


volumes:
  zookeeper-data:
  zookeeper-log:
  kafka-data:
  postgres-data:
  cassandra-data:

networks:
  app-network:
    driver: bridge

      


